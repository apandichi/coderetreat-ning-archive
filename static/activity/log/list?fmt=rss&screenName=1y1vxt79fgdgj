<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0"
    xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:media="http://search.yahoo.com/mrss/"
    xmlns:georss="http://www.w3.org/2003/01/geo/wgs84_pos#"
    >
    <channel>
        <title>Rob Tarr&#039;s Latest Activity on Coderetreat</title>
        <description></description>
        <link>http://coderetreat.org/profile/RobTarr</link>
        <pubDate>Sun, 29 Jan 2017 11:14:09 +0000</pubDate>
        <lastBuildDate>Sun, 29 Jan 2017 11:14:09 +0000</lastBuildDate>
        <image>
            <title>Rob Tarr&#039;s Latest Activity on Coderetreat</title>
            <link>http://coderetreat.org/profile/RobTarr</link>
            <url>http://api.ning.com:80/files/ww4vQnU9WR5GLvo9LzY6X-OCGQzArXn1t5Cvd3CfYSTpT3JIYRb9q*5WxFMN8WzzH*2Cpv9lQLIZvmbGUGdNmuLtR*iNV29l/defaultprofileoldphoto.png?width=50&amp;height=50&amp;crop=1%3A1</url>
            <height>50</height>
        </image>
        <item>
               <guid isPermaLink="false">000000000062833e0000000009d8637820e27ba4eea1365b</guid>
               <title>Rob Tarr posted a blog post</title>
               <link>http://coderetreat.org/xn/detail/6456126:BlogPost:5563?xg_source=activity</link>
               <description><![CDATA[ <span class="feed-string"><a href="http://coderetreat.org/profile/RobTarr?xg_source=activity">Rob Tarr</a> posted a blog post</span><br/><div class="rich"><h3 class="feed-story-title"><a href="http://coderetreat.org/xn/detail/6456126:BlogPost:5563?xg_source=activity">Code Retreat Roundup: GitHub Toolbox</a></h3><div class="rich-detail"><div class="rich-excerpt"><div data-contentId="6456126:BlogPost:5563">Original post can be found at <a href="http://seesparkbox.com/foundry/code_retreat_roundup_github_toolbox">http://seesparkbox.com/foundry/code_retreat_roundup_github_toolbox</a>Last Saturday, <a href="http://seesparkbox.com/foundry/author/rob_harr">Rob</a> and <a href="http://seesparkbox.com/foundry/author/rob_tarr">I</a> went down to Cincinnati for the <a href="http://blog.coderetreat.com/global-day-of-coderetreat">Global Day of Code Retreat</a>. We spent the entire day practicing code. Yes, that’s right – practicing. We wrote and tested code for 45 minutes, talked about what we had done, deleted our code, and then started over. It was a very useful exercise which Rob will be blogging about very soon.Since Rob is going to write about how incredibly beneficial the day was for us, I wanted to highlight some of the cool tools that I discovered while I was there. The day was centered around developing using <a href="http://en.wikipedia.org/wiki/Test-driven_development">TDD</a>, so there’s definitely a testing slant to my list. Now, I’ll be the first to say that I definitely fall into the camp of wanting to write tests for my code; but not having done it on a project, I wasn’t sure where to start. After the Code Retreat, I feel much more confident in my ability to write good tests, and I think that these tools will help me to do just that. <a href="https://github.com/jimweirich/rspec-given">rspec-given</a>I had the opportunity to pair with <a href="https://twitter.com/#!/pkananen">@pkananen</a> on some Ruby, using RSpec for testing. As I was trying to figure out how to start writing the tests, Peter suggested we try given. It’s basically a simple syntax for quickly writing very clear, readable tests.The first RSpec test I wrote looked something like this:1describe "conways" do2  cell = Cell.new3  4  it "should live" do5    cell.lives?(0).should be_false6    cell.lives?(1).should be_false7    cell.lives?(2).should be_true8    cell.lives?(3).should be_true9    cell.lives?(4).should be_false10  end1112end<a href="https://gist.github.com/raw/7e1651f6f3e7fb79cbfe/aa1709b8c1cf0fda07e0608b420641111361d0fc/ruby-rspec">view raw</a> <a href="https://gist.github.com/7e1651f6f3e7fb79cbfe#file_ruby_rspec">ruby-rspec</a> <a href="https://gist.github.com/7e1651f6f3e7fb79cbfe">This Gist</a> brought to you by <a href="http://github.com">GitHub</a>. This is an interpretation of this same test using given:1describe Cell do2  Given(:cell) { cell = Cell.new }3  4  context "with 0 neighbors" do5    Then { cell.lives?(0) == false }6  end78  context "with 1 neighbor" do9    Then { cell.lives?(1) == false }10  end1112  context "with 2 neighbors" do13    Then { cell.lives?(2) == true }14  end1516  context "with 3 neighbors" do17    Then { cell.lives?(3) == true }18  end1920  context "with 4 neighbors" do21    Then { cell.lives?(4).should be_false }22  end23end<a href="https://gist.github.com/raw/7e1651f6f3e7fb79cbfe/012d67002d9eff46c20090e54241f30cd699c8a3/ruby-given">view raw</a> <a href="https://gist.github.com/7e1651f6f3e7fb79cbfe#file_ruby_given">ruby-given</a> <a href="https://gist.github.com/7e1651f6f3e7fb79cbfe">This Gist</a> brought to you by <a href="http://github.com">GitHub</a>. I haven’t played with these a lot, but I feel like the rspec-given tests may be more expressive than the straight RSpec tests. It provides a simple syntax that I think most people could read and understand what the test results should be. <a href="https://github.com/guard/guard">Guard</a>During another session, I paired with <a href="https://twitter.com/#!/mattbrewer">@MattBrewer</a> and saw another really cool tool – Guard. During my first two sessions, the process was something like this:Write test.Write code.Save code.Switch to terminal.Run tests.Switch back to TextMate.Fix code.Repeat as necessary.Move on to next test.Working with Matt, however, that workflow changed:Write test.Write code.Save code.Watch tests run in background.Fix code.Repeat as necessary.Move on to next test.Step 4 here was the frosting on the cake. Every time we saved a file, Guard ran the tests. With a terminal window open off to the side, we could instantly see the results of the tests. Seeing as we only had 45 minutes to get as much of the problem solved as we could, this was a very useful thing to have running.Setting up Guard was pretty easy, and I found that it will also do things such as rebuilding your gem set if you update your gemfile. I also installed a growl gem, so I now get test/gemfile build results in growl notifications. I’m sure it does a lot more, and I’m anxious to spend more time finding out what it can do. <a href="https://github.com/achiu/consular">Consular</a>While I was setting up Guard (with a few pointers from <a href="https://twitter.com/#!/cromwellryan">@cromwellryan</a>), Ryan told me about this little app. Between running multiple Rails apps and other miscellaneous things, it’s not uncommon for me to have Terminal running with multiple tabs open for each project I'm working on. Consular provides a way to define sets of windows/tabs and provides a way to execute commands in those windows/tabs at start up. So, I’m setting up consular files to open up work spaces for my projects and launch the server and any other appropriate files for those projects. AWESOME!I wrote a quick little consular script for starting up my Rails projects: 1window do2  run 'echo -n -e "\033]0; Project Name - Rails Server \0007"'34  before { run 'cd projects/project-folder' }5 6  run "rails s"78  tab "named test" do9    run 'echo -n -e "\033]0; Project Name - Tests \0007"'10    run "guard"11  end1213  tab "named project" do14    run 'echo -n -e "\033]0; Project Name - Files \0007"'15    run "ls"16  end17end18<a href="https://gist.github.com/raw/7e1651f6f3e7fb79cbfe/6e4c032a09ffa4e2d66a82debc6585637ba306c0/Consular">view raw</a> <a href="https://gist.github.com/7e1651f6f3e7fb79cbfe#file_consular">Consular</a> <a href="https://gist.github.com/7e1651f6f3e7fb79cbfe">This Gist</a> brought to you by <a href="http://github.com">GitHub</a>.  <a href="http://www.tryjasmine.com/">tryjasmine.com</a>This was another thing I picked up from <a href="https://twitter.com/#!/pkananen">@pkananen</a>. If you want to try your hand at writing tests for JavaScript (or CoffeeScript) then this might be a great place to start. It gives you a place to write your code and tests side by side. You can easily convert between CoffeeScript and JavaScript and it gives you a few built in macros to get started or just to quickly stub out tests. What other tools are you using?Today, there are so many tools to help us build things faster and more efficiently that it is sometimes hard to keep up with them. Frankly, these tools solved some problems that I didn’t even really know that I had. I am getting the feeling that after using these for a little while some of them will quickly become essential parts of my development toolbox.I would love to know of other cool things I can add to my toolbox. Leave me some comments below or on Twitter.And if you haven't checked out GitHub's <a href="http://octodex.github.com/">Octodex</a>, you should. The Octocat is waiting.  <a class="continue-link" href="http://coderetreat.org/profiles/blogs/code-retreat-roundup-github-toolbox">See More</a></div></div></div></div>]]></description>
               <pubDate>Fri, 09 Dec 2011 21:38:22 +0000</pubDate>
               </item><item>
               <guid isPermaLink="false">000000000062833e0000000009d863784264d38dee487e72</guid>
               <title>Rob Tarr is now a member of Coderetreat</title>
               <link>http://coderetreat.org/profile/RobTarr?xg_source=activity</link>
               <description><![CDATA[ <span class="feed-string"><a href="http://coderetreat.org/profile/RobTarr?xg_source=activity">Rob Tarr</a> is now a member of Coderetreat</span><br/>]]></description>
               <pubDate>Fri, 09 Dec 2011 16:13:38 +0000</pubDate>
               </item>    </channel>
</rss>
